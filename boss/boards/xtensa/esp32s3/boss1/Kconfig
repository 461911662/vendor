#
# For a description of the syntax of this configuration file,
# see the file kconfig-language.txt in the NuttX tools repository.
#

if ARCH_BOARD_CUSTOM

choice
	prompt "ESP32-S3-Boss1 v1.0 version"
	default ESP32S3_BOSS1_V1_0

config ESP32S3_BOSS1_V1_0
	bool "ESP32-S3-Boss1 v1.0"
	depends on ARCH_CHIP_ESP32S3WROOM1N4 || ARCH_CHIP_ESP32S3MINI1N8 || ARCH_CHIP_ESP32S3WROOM2N16R8V || ARCH_CHIP_ESP32S3WROOM2N32R8V || ARCH_CHIP_ESP32S3CUSTOM
	select ARCH_HAVE_LEDS
	select ARCH_HAVE_BUTTONS
	select ARCH_HAVE_IRQBUTTONS if ESP32S3_GPIO_IRQ
	---help---
                The ESP32-S3 DevKit features the ESP32-S3 CPU with dual Xtensa LX7 cores.
                It comes in two flavors, the ESP32-S3-DevKitM-1 and the ESP32-S3-DevKitC-1.
                The ESP32-S3-DevKitM-1 version contains the ESP32-S3-MINI-1/1U module and the
                ESP32-S3-DevKitC-1 version may be based either on ESP32-S3-WROOM-1/1U or
                ESP32-S3-WROOM-2/2U.

endchoice

endif #ARCH_BOARD_CUSTOM


if ESP32S3_BOSS1_V1_0

config ESP32S3_STORAGE_MTD_OFFSET
	hex "Storage MTD base address in SPI Flash"
	default 0x180000 if !ESP32S3_HAVE_OTA_PARTITION
	default 0x250000 if ESP32S3_HAVE_OTA_PARTITION
	depends on ESP32S3_MTD
	---help---
		MTD base address in SPI Flash.

config ESP32S3_STORAGE_MTD_SIZE
	hex "Storage MTD size in SPI Flash"
	default 0x100000
	range 0x0 0x400000 if ESP32S3_FLASH_4M
	range 0x0 0x800000 if ESP32S3_FLASH_8M
	range 0x0 0x1000000 if ESP32S3_FLASH_16M
	range 0x0 0x2000000 if ESP32S3_FLASH_32M
	depends on ESP32S3_MTD
	---help---
		MTD size in SPI Flash.

choice ESP32S3_SPIFLASH_FS
	prompt "Mount SPI Flash MTD on bring-up"
	default ESP32S3_SPIFLASH_SMARTFS
	depends on ESP32S3_MTD
	optional
	---help---
		Mount the SPI Flash MTD with the selected File System format on board
		bring-up.
		If not selected, the MTD will be registered as a device node on /dev.

config ESP32S3_SPIFLASH_SMARTFS
	bool "SmartFS"
	select FS_SMARTFS
	select MTD_SMART

config ESP32S3_SPIFLASH_NXFFS
	bool "NXFFS"
	select FS_NXFFS

config ESP32S3_SPIFLASH_SPIFFS
	bool "SPIFFS"
	select FS_SPIFFS

config ESP32S3_SPIFLASH_LITTLEFS
	bool "LittleFS"
	select FS_LITTLEFS

endchoice # ESP32S3_SPIFLASH_FS

if PM

config PM_ALARM_SEC
	int "PM_STANDBY delay (seconds)"
	default 15
	---help---
		Number of seconds to wait in PM_STANDBY before going to PM_STANDBY mode.

config PM_ALARM_NSEC
	int "PM_STANDBY delay (nanoseconds)"
	default 0
	---help---
		Number of additional nanoseconds to wait in PM_STANDBY before going to PM_STANDBY mode.

config PM_SLEEP_WAKEUP_SEC
	int "PM_SLEEP delay (seconds)"
	default 20
	---help---
		Number of seconds to wait in PM_SLEEP.

config PM_SLEEP_WAKEUP_NSEC
	int "PM_SLEEP delay (nanoseconds)"
	default 0
	---help---
		Number of additional nanoseconds to wait in PM_SLEEP.

endif # PM

config ESP32S3_EFUSE_VIRTUAL
	bool "Simulate eFuse operations in RAM"
	default n
	help
		If "n" - No virtual mode. All eFuse operations are real and use eFuse registers.
		If "y" - The virtual mode is enabled and all eFuse operations (read and write) are redirected
		to RAM instead of eFuse registers, all permanent changes (via eFuse) are disabled.
		Log output will state changes that would be applied, but they will not be.

		If it is "y", then SECURE_FLASH_ENCRYPTION_MODE_RELEASE cannot be used.
		Because the EFUSE VIRT mode is for testing only.

		During startup, the eFuses are copied into RAM. This mode is useful for fast tests.

config ESP32S3_EFUSE_VIRTUAL_KEEP_IN_FLASH
	bool "Keep eFuses in flash"
	depends on ESP32S3_EFUSE_VIRTUAL
	help
		In addition to the "Simulate eFuse operations in RAM" option, this option just adds
		a feature to keep eFuses after reboots in flash memory. To use this mode the partition_table
		should have the `efuse` partition. partition.csv: "efuse_em, data, efuse,   ,   0x2000,"

		During startup, the eFuses are copied from flash or,
		in case if flash is empty, from real eFuse to RAM and then update flash.
		This mode is useful when need to keep changes after reboot
		(testing secure_boot and flash_encryption).

config ESP32S3_EFUSE_VIRTUAL_LOG_ALL_WRITES
	bool "Log all virtual writes"
	depends on ESP32S3_EFUSE_VIRTUAL
	help
		If enabled, log efuse burns. This shows changes that would be made.

endif # ESP32S3_BOSS1_V1_0
